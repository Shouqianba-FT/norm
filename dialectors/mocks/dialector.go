// Code generated by MockGen. DO NOT EDIT.
// Source: dialectors/dialector.go

// Package mock_dialectors is a generated GoMock package.
package mock_dialectors

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dialectors "github.com/zhihu/norm/v3/dialectors"
)

// MockIDialector is a mock of IDialector interface.
type MockIDialector struct {
	ctrl     *gomock.Controller
	recorder *MockIDialectorMockRecorder
}

// MockIDialectorMockRecorder is the mock recorder for MockIDialector.
type MockIDialectorMockRecorder struct {
	mock *MockIDialector
}

// NewMockIDialector creates a new mock instance.
func NewMockIDialector(ctrl *gomock.Controller) *MockIDialector {
	mock := &MockIDialector{ctrl: ctrl}
	mock.recorder = &MockIDialectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDialector) EXPECT() *MockIDialectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDialector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIDialectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDialector)(nil).Close))
}

// Execute mocks base method.
func (m *MockIDialector) Execute(arg0 string) (*dialectors.ResultSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*dialectors.ResultSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIDialectorMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDialector)(nil).Execute), arg0)
}
